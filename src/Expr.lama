-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (v) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

fun getVar (state, name) {
  case state.lookup (name) of
    Var (v) -> v
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs(c, ds) {
  case ds of
    {}     -> c
  | d:tail -> case d of
      Var (ds) -> evalDefs(c.addNames(ds), tail)
    | Fun (name, args, body) -> evalDefs(c.addFunction(name, args, body), tail)
    esac
  esac
}

fun passArgs(s, as, vs) {
  fun passOne(s, [a, v]) {
    case v of
      Var (d) -> s.addName(a, v) 
    esac
  }
  foldr (passOne, s, zip(as, vs))
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of 
    Var (x)              -> [c, s.lookup(x)]
  | Const (num)          -> [c, Var (num)]
  | Binop (op, lhs, rhs) ->
    case evalList(c, {lhs, rhs}) of
      [c2, {Var (lhv), Var (rhv)}] -> [c2, Var (evalOp(op, lhv, rhv))]
    esac
  | Write (e) ->
    case eval(c, e) of
      [[s2, w2], Var (res)] -> [[s2, writeWorld(res, w2)], Bot]
    esac
  | Read (x) ->
    checkVar(s, x);
    case readWorld(w) of
      [res, w2] -> [[s <- [x, Var (res)], w2], Bot]
    esac
  | Seq (e1, e2) ->
    case eval(c, e1) of
      [c2, _] -> eval(c2, e2)
    esac
  | Ignor (e) -> [eval(c, e).fst, Bot]
  | Assn (l, r) ->
    case evalList(c, {l, r}) of
      -- TODO: think: can we reassign functions?
      [[s2, w2], {RefVal (x), v}] -> [[s2 <- [x, v], w2], v]
    esac
  | Ref (x) -> [c, RefVal (x)]
  | Skip -> [c, Bot]
  | While (e, s) ->
    case eval(c, e) of
      [c2, Var (0)] -> [c2, Bot]
    | [c2, Var (_)] ->
        case eval(c2, s) of 
          [c3, v] -> eval(c3, expr)
        esac
    esac
  | DoWhile (s, e) -> eval(c, Seq(s, While(e, s)))
  | If (e, tru, fls) ->
      case eval(c, e) of
        [c2, Var (0)] -> eval(c2, fls)
      | [c2, Var (_)] -> eval(c2, tru)
      esac
  | Scope (ds, e) ->
    case s.enterScope of
      s2 -> case evalDefs(s2, ds) of
        s3 -> case eval([s3, w], e) of
          [[s4, w2], res] -> [[s4.leaveScope, w2], res]
        esac
      esac
    esac
  | Call (f, es) ->
    s.checkFun(f);
    case s.lookup(f) of
      Fun (as, body) -> case evalList([s, w], es) of
        [[s2, w2], vs] -> case s2.enterFunction of
          s3 -> case s3.passArgs(as, vs) of
            s4 -> case eval([s4, w], body) of
              [[s5, w2], res] -> [[s2.leaveFunction(s5.getGlobal), w2], res]
            esac
          esac
        esac
      esac
    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}